The labs are done using Google Cloud Shell

LAB 1 - CREATING VIRTUAL MACHINES

CREATE UTILITY VIRTUAL MACHINE
gcloud beta compute --project=qwiklabs-gcp-03-99ddf5d3c740 instances create utility-vm --zone=us-central1-c --machine-type=n1-standard-1 --subnet=default --no-address --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=1027673505582-compute@developer.gserviceaccount.com --image=debian-10-buster-v20200910 --image-project=debian-cloud --boot-disk-size=10GB --boot-disk-type=pd-standard

CREATE WINDOWS VIRTUAL MACHINE
gcloud beta compute --project=qwiklabs-gcp-03-99ddf5d3c740 instances create windows-vm --zone=europe-west2-a --machine-type=n1-standard-2 --subnet=default --image=windows-server-2016-dc-core-v20200908 --image-project=windows-cloud --boot-disk-size=100GB --boot-disk-type=pd-ssd
gcloud compute --project=qwiklabs-gcp-03-99ddf5d3c740 firewall-rules create default-allow-http --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:80 --source-ranges=0.0.0.0/0 --target-tags=http-server
gcloud compute --project=qwiklabs-gcp-03-99ddf5d3c740 firewall-rules create default-allow-https --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:443 --source-ranges=0.0.0.0/0 --target-tags=https-server

CREATE CUSTOM VIRTUAL MACHINE
gcloud beta compute --project=qwiklabs-gcp-03-99ddf5d3c740 instances create custom-vm --zone=us-west1-b --machine-type=e2-custom-6-32768 --subnet=default --image=debian-10-buster-v20200910 --image-project=debian-cloud --boot-disk-size=10GB --boot-disk-type=pd-standard


LAB 2 - GETTING STARTED WITH GKE
confirm that the needed API's are available
Kubernetes Engine API
Container Registry API 

I. Start a Kubernetes Engine Cluster
export MY_ZONE=us-central1-a
To start a Kubernetes cluster managed by Kubernetes Engine and named webfrontend and to configure it to run 2 nodes:gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
kubectl version

II. Run and deploy a Container
To launch a single instance of the niginx container: kubectl create deploy nginx --image=nginx:1.17.10
View the pod running the nginx container: kubectl get pods
To expose the nginx container to the internet: kubectl expose deployment nginx --port 80 --type LoadBalancer
View the new number of pods: kubectl get services
Scale up the number of pods running on your service: kubectl scale deployment nginx --replicas 3
To confirm kubectl has updated the number of pods: kubectl get pods
To confirm the external IP is still the same: kubectl get services
